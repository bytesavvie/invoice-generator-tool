// React
import { useContext, useState, useEffect, useCallback } from 'react';

// Next
import Head from 'next/head';
import type { NextPage } from 'next';

// Libraries
import { useSession } from 'next-auth/react';
import { PDFViewer } from '@react-pdf/renderer';

// React Multi Date Picker
import DatePicker from 'react-multi-date-picker';

// MUI
import Typography from '@mui/material/Typography';
import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
import TextField from '@mui/material/TextField';
import Autocomplete from '@mui/material/Autocomplete';

// Context
import { AppContext } from '../context';

// Components
import Navbar from '../components/Navbar';
import InvoicePDFTemplate1 from '../pdf/InvoicePDFTemplate1';

// Types
import { Student } from '../types/customTypes';

const pdfData = {
  yourName: 'Mark Mulligan',
  yourEmail: 'mark.mulligan.jr1@gmail.com',
  yourNumber: '817-504-5426',
  studentName: 'Bill Joel',
  parentName: 'Kevin Joel',
  parentEmail: 'kevinjoel@gmail.com',
};

const Invoice: NextPage = () => {
  const { data: session, status } = useSession({ required: true });
  const { students } = useContext(AppContext);
  const [lessonDates, setLessonDates] = useState<any>(null);
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);

  const createPDFData = useCallback(() => {
    if (!session || !selectedStudent || !lessonDates || !(lessonDates.length > 0)) {
      return;
    }

    const lessonDateStrings = lessonDates.map((lessonDate: any) => {
      return `${lessonDate.month}/${lessonDate.day}/${lessonDate.year}`;
    });

    let pdfData = {
      yourName: session.user.name,
      studentName: selectedStudent.name,
      parentName: selectedStudent.parentName,
      parentEmail: selectedStudent.parentEmail,
      lessonAmount: selectedStudent.lessonAmount,
      lessonDates: lessonDateStrings,
    };

    console.log('pdfData', pdfData);
  }, [session, selectedStudent, lessonDates]);

  useEffect(() => {
    if (lessonDates && selectedStudent) {
      createPDFData();
    }
  }, [lessonDates, selectedStudent, createPDFData]);

  if (status === 'loading') {
    return <div>Loading</div>;
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Container sx={{ paddingTop: '30px', paddingBottom: '100px' }}>
        <Autocomplete
          id="studentSelect"
          sx={{ width: 300, mb: '1.2rem' }}
          options={students}
          value={selectedStudent}
          onChange={(event: any, newValue: Student | null) => {
            setSelectedStudent(newValue);
          }}
          autoHighlight
          getOptionLabel={(option) => option.name}
          renderInput={(params) => <TextField {...params} size="small" label="Select a Student" />}
        />
        <DatePicker
          multiple
          format="MM/DD/YYYY"
          value={lessonDates}
          onChange={setLessonDates}
          render={(value: any, openCalender: any) => (
            <TextField
              sx={{ width: 300 }}
              value={value}
              onClick={() => openCalender()}
              size="small"
              label="Select Lesson Dates"
            />
          )}
        />
        <Box sx={{ mt: '50px' }}>
          <PDFViewer style={{ height: 700, width: '100%' }}>
            <InvoicePDFTemplate1 data={pdfData} />
          </PDFViewer>
        </Box>
      </Container>
    </div>
  );
};

export default Invoice;
