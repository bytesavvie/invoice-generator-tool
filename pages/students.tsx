// React
import { useState, useEffect, useContext, useCallback } from 'react';

// Next
import Head from 'next/head';
import type { NextPage } from 'next';

// Libraries
import axios from 'axios';
import { useSession } from 'next-auth/react';

// MUI
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Paper from '@mui/material/Paper';
import Grid from '@mui/material/Grid';
import TextField from '@mui/material/TextField';

// Components
import Navbar from '../components/Navbar';
import StudentTable from '../components/StudentTable';
import StudentModal from '../components/StudentModal';
import ConfirmModal from '../components/ConfirmModal';

// Context
import { AppContext } from '../context';

// Types
import { Student } from '../types/customTypes';

const Dashboard: NextPage = () => {
  const { status } = useSession({ required: true });
  const { students, setStudents, hasFetchedStudents, setHasFetchedStudents } = useContext(AppContext);

  const [showStudentModal, setShowStudentModal] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
  const [showConfirmModal, setShowConfirmModal] = useState(false);

  const handleEditStudentClick = (student: Student) => {
    setSelectedStudent(student);
    setShowStudentModal(true);
  };

  const handleAddStudentClick = () => {
    setSelectedStudent(null);
    setShowStudentModal(true);
  };

  const handleDeleteStudentClick = (student: Student) => {
    setSelectedStudent(student);
    setShowConfirmModal(true);
  };

  const handleStudentModalClose = () => {
    setShowStudentModal(false);
  };

  const handleDeleteStudent = async () => {
    if (!selectedStudent) {
      return;
    }

    try {
      await axios.delete(`/api/students?id=${selectedStudent.id}`);
      const updatedStudents: Student[] = [];
      students.forEach((student) => {
        if (student.id !== selectedStudent.id) {
          updatedStudents.push(student);
        }
      });

      setStudents(updatedStudents);
    } catch (err) {
      console.log(err);
    }

    setShowConfirmModal(false);
  };

  const handleGetStudents = useCallback(async () => {
    try {
      const { data } = await axios.get<Student[]>('/api/students');
      setStudents(data);
    } catch (err) {
      console.log(err);
    }
  }, [setStudents]);

  useEffect(() => {
    if (!hasFetchedStudents) {
      handleGetStudents();
      setHasFetchedStudents(true);
    }
  }, [handleGetStudents, hasFetchedStudents, setHasFetchedStudents]);

  if (status === 'loading') {
    return <div>Loading</div>;
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Container sx={{ paddingTop: '30px', paddingBottom: '100px' }}>
        <Typography variant="h1" sx={{ fontSize: '2.5rem', marginBottom: '2rem' }}>
          Dashboard
        </Typography>
        <Box component="section" sx={{ marginBottom: '2rem' }}>
          <Typography variant="h2" sx={{ fontSize: '2rem', marginBottom: '1rem' }}>
            Your Info
          </Typography>
          <Paper sx={{ padding: '20px' }}>
            <Grid container spacing={4} sx={{ marginBottom: '1rem' }}>
              <Grid item xs={4}>
                <TextField fullWidth id="outlined-basic" label="Name" variant="outlined" size="small" />
              </Grid>
              <Grid item xs={4}>
                <TextField fullWidth id="outlined-basic" label="Email" variant="outlined" size="small" />
              </Grid>
              <Grid item xs={4}>
                <TextField fullWidth id="outlined-basic" label="Phone Number" variant="outlined" size="small" />
              </Grid>
            </Grid>

            <Box sx={{ textAlign: 'center' }}>
              <Button variant="contained">Save Changes</Button>
            </Box>
          </Paper>
        </Box>

        <Box component="section">
          <Typography variant="h2" sx={{ fontSize: '2rem', marginBottom: '1rem' }}>
            Students
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', marginBottom: '1.5rem' }}>
            <TextField id="outlined-basic" label="Search" variant="outlined" size="small" />
            <Button variant="contained" onClick={() => handleAddStudentClick()}>
              Add Student
            </Button>
          </Box>

          <StudentModal
            onClose={handleStudentModalClose}
            showModal={showStudentModal}
            selectedStudent={selectedStudent}
          />
          <StudentTable
            handleEditStudentClick={handleEditStudentClick}
            studentData={students}
            handleDeleteStudentClick={handleDeleteStudentClick}
          />
          <ConfirmModal
            modalTitle="Delete Student?"
            modalMessage={`Are you sure you want to the delete the student ${selectedStudent?.name || ''}?`}
            showModal={showConfirmModal}
            onClose={() => setShowConfirmModal(false)}
            confirmText="Delete Student"
            onConfirm={() => handleDeleteStudent()}
          />
        </Box>
      </Container>
    </div>
  );
};

export default Dashboard;
